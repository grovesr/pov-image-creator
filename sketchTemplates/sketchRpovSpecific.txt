
void setup () {{
  size({SCREENX},{SCREENY});
  // set the window size:
  //size(int(sweptLength*2), int(sweptLength*2)+2*controlBorder+controlHeight);
  int n=0;
  for (String im : images) {{
    byteString.add(loadStrings(dataPath(im)));
    // number of dots on the swept line
    numPixels[n] = byteString.get(n)[0].length() / hexCharsPerWord[n];
    // size of each dot in pixels
    pixelSize[n] = float(500) / (2 * partialSet * numPixels[n]);
    // set the number of degrees per increment
    increment[n] = deg/(byteString.get(n).length/numFrames[n]);
    n++;
  }}
  //sweptLength
  sweptLength = partialSet * pixelSize[0] * numPixels[0];
  origin[0] = sweptLength;
  origin[1] = sweptLength;
  // delete the log file
  File fileToDelete = new File(dataPath("receivedData.txt"));
  fileToDelete.delete();
  background(bgColor);
  if (deg == 360) {{
    reflect=false;
  }}
  init_gui();
  if(enableSerial) {{
    myPort = new Serial(this, portNum, usart_baud);
    // don't generate a serialEvent() unless you get a newline character:
    myPort.bufferUntil('\n');
  }}
  //log=log+"length of the lines = "+str(byteString[0].length())+"\n";
  //println("length of the lines = "+str(byteString[0].length()));
  //log=log+"number of lines = "+str(byteString.length)+"\n";
  //println("number of lines = "+str(byteString.length));
  //log=log+"numBoards = "+str(numBoards)+"\n";
  //println("numBoards = "+str(numBoards));
  //log=log+"numFrames = "+str(numFrames)+"\n";
  //println("numFrames = "+str(numFrames));
  //log=log+"gsFlag = "+str(gsFlag)+"\n";
  //println("gsFlag = "+str(gsFlag));
  //log=log+"reflect = "+str(reflect)+"\n";
  //println("reflect = "+str(reflect));
  //setLogText();
}}
// persistent() and controlEvent() are different for XYPOV and RPOV
public void persistent(boolean theFlag) {{
  persistent=theFlag;
  blankLabel(persistentLabel);
  if (theFlag) {{
    persistentLabel.setValue("persistent");
  }} 
  else {{
    persistentLabel.setValue("sweep");
  }}
  count=0;
  stroke(bgColor);
  fill(bgColor);
  rect(0, 0, 2*sweptLength, 2*sweptLength);
}}
public void controlEvent(ControlEvent theEvent) {{
  // ListBox is of type ControlGroup.
  // 1 controlEvent will be executed, where the event
  // originates from a ControlGroup. therefore
  // you need to check the Event with
  // if (theEvent.isGroup())
  // to avoid an error message from controlP5.

  if (theEvent.isGroup() && theEvent.getName().equals("portList")) {{
    portNum=ports[(int)theEvent.getGroup().getValue()];
    if(myPort != null) {{
      myPort.stop();
    }}      
    myPort = new Serial(this, portNum, usart_baud);
    if (enableSerial && myPort != null) {{
      // don't generate a serialEvent() unless you get a newline character:
      myPort.bufferUntil('\n');
    }}
    highlightList(portList, portNum);
    portList.getCaptionLabel().set("Port: "+portNum); 
    return;
  }}
  if (theEvent.isGroup() && theEvent.getName().equals("pixelList")) {{
    pixelStyle=pixelStyles[(int)theEvent.getGroup().getValue()];
    highlightList(pixelList, pixelStyleNames[pixelStyle]);
    count=0;
    stroke(bgColor);
    fill(bgColor);
    rect(0, 0, 2*sweptLength, 2*sweptLength);
    return;
  }}
  if (theEvent.isGroup() && theEvent.getName().equals("orderList")) {{
    pixelOrder=pixelOrders[(int)theEvent.getGroup().getValue()];
    highlightList(orderList, pixelOrderNames[(int)theEvent.getGroup().getValue()]);
    log=log+"Pixel Order = "+pixelOrderNames[(int)theEvent.getGroup().getValue()]+"\n";
    setLogText();
    return;
  }}
  if (theEvent.getName().equals("sweepOrder")){{
    log=log+"Channel Order = "+standardSweepOrderLabel.get().getText()+"\n";
    setLogText();
    println("Channel Order = "+standardSweepOrderLabel.get().getText());
  }}
}}

void drawPixelRounded(float thisRadius, float theta, int frame)
{{
  // Draw a rounded arc RPOV pixel
  // First the inner radius arc
  float thisLength=thisRadius;
  float[] ctlBeginInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta)), origin[1]-thisLength*sin(TWO_PI/360 * (theta))
    }};
  float[] arcBeginInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta)), origin[1]-thisLength*sin(TWO_PI/360 * theta)
    }};
  float[] arcMidInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + increment[frame]/2)), origin[1]-thisLength*sin(TWO_PI/360 * (theta + increment[frame]/2))
    }};
  float[] arcEndInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + increment[frame])), origin[1]-thisLength*sin(TWO_PI/360 * (theta + increment[frame]))
    }};
  float[] ctlEndInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + increment[frame])), origin[1]-thisLength*sin(TWO_PI/360 * (theta + increment[frame]))
    }};
    // Next the outer radius arc
    thisLength=thisRadius+pixelSize[frame];
  float[] ctlBeginOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * theta), origin[1]-thisLength*sin(TWO_PI/360 * (theta))
    }};
  float[] arcBeginOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * theta), origin[1]-thisLength*sin(TWO_PI/360 * theta)
    }};
  float[] arcMidOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + increment[frame]/2)), origin[1]-thisLength*sin(TWO_PI/360 * (theta + increment[frame]/2))
    }};
  float[] arcEndOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + increment[frame])), origin[1]-thisLength*sin(TWO_PI/360 * (theta + increment[frame]))
    }};
  float[] ctlEndOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + increment[frame])), origin[1]-thisLength*sin(TWO_PI/360 * (theta + increment[frame]))
    }};
    // the shape representing the inner portion of the swept RPOV pixel
    beginShape();
  curveVertex(ctlBeginInner[0], ctlBeginInner[1]);
  curveVertex(arcBeginInner[0], arcBeginInner[1]);
  curveVertex(arcMidInner[0], arcMidInner[1]);
  curveVertex(arcEndInner[0], arcEndInner[1]);
  curveVertex(ctlEndInner[0], ctlEndInner[1]);
  curveVertex(ctlEndOuter[0], ctlEndOuter[1]);
  curveVertex(arcEndOuter[0], arcEndOuter[1]);
  curveVertex(arcMidOuter[0], arcMidOuter[1]);
  curveVertex(arcBeginOuter[0], arcBeginOuter[1]);
  curveVertex(ctlBeginOuter[0], ctlBeginOuter[1]);
  endShape(CLOSE);

  // Next draw the two radiused ends of the RPOV pixel
  float[] radOriginLow= {{
    origin[0]+(thisRadius+pixelSize[frame]/2)*cos(TWO_PI/360 * theta), origin[1]-(thisRadius+pixelSize[frame]/2)*sin(TWO_PI/360 * theta)
    }};
  float[] arcCtlBeginRadLow= {{
    radOriginLow[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (0-(180-theta))), radOriginLow[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (0-(180-theta)))
    }};
    float[] arcBeginRadLow=arcBeginInner;
  float[] arcQtr1RadLow= {{
    radOriginLow[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (0-(135-theta))), radOriginLow[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (0-(135-theta)))
    }};
  float[] arcMidRadLow= {{
    radOriginLow[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (0-(90-theta))), radOriginLow[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (0-(90-theta)))
    }};
  float[] arcQtr3RadLow= {{
    radOriginLow[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (0-(45-theta))), radOriginLow[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (0-(45-theta)))
    }};
    float[] arcEndRadLow=arcBeginOuter;
  float[] arcCtlEndRadLow= {{
    radOriginLow[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (theta)), radOriginLow[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (theta))
    }};
    beginShape();
  curveVertex(arcCtlBeginRadLow[0], arcCtlBeginRadLow[1]);
  curveVertex(arcBeginRadLow[0], arcBeginRadLow[1]);
  curveVertex(arcQtr1RadLow[0], arcQtr1RadLow[1]);
  curveVertex(arcMidRadLow[0], arcMidRadLow[1]);
  curveVertex(arcQtr3RadLow[0], arcQtr3RadLow[1]);
  curveVertex(arcEndRadLow[0], arcEndRadLow[1]);
  curveVertex(arcCtlEndRadLow[0], arcCtlEndRadLow[1]);
  endShape(CLOSE);
  float[] radOriginHigh= {{
    origin[0]+(thisRadius+pixelSize[frame]/2)*cos(TWO_PI/360 * (theta+increment[frame])), origin[1]-(thisRadius+pixelSize[frame]/2)*sin(TWO_PI/360 * (theta+increment[frame]))
    }};
  float[] arcCtlBeginRadHigh= {{
    radOriginHigh[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (180+(theta+increment[frame]))), radOriginHigh[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (180+theta+increment[frame]))
    }};
    float[] arcBeginRadHigh=arcEndInner;
  float[] arcQtr1RadHigh= {{
    radOriginHigh[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (135+(theta+increment[frame]))), radOriginHigh[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (135+(theta+increment[frame])))
    }};
  float[] arcMidRadHigh= {{
    radOriginHigh[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (90+(theta+increment[frame]))), radOriginHigh[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (90+(theta+increment[frame])))
    }};
  float[] arcQtr3RadHigh= {{
    radOriginHigh[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (45+(theta+increment[frame]))), radOriginHigh[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (45+(theta+increment[frame])))
    }};
    float[] arcEndRadHigh=arcEndOuter;
  float[] arcCtlEndRadHigh= {{
    radOriginHigh[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (theta+increment[frame])), radOriginHigh[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (theta+increment[frame]))
    }};
    beginShape();
  curveVertex(arcCtlBeginRadHigh[0], arcCtlBeginRadHigh[1]);
  curveVertex(arcBeginRadHigh[0], arcBeginRadHigh[1]);
  curveVertex(arcQtr1RadHigh[0], arcQtr1RadHigh[1]);
  curveVertex(arcMidRadHigh[0], arcMidRadHigh[1]);
  curveVertex(arcQtr3RadHigh[0], arcQtr3RadHigh[1]);
  curveVertex(arcEndRadHigh[0], arcEndRadHigh[1]);
  curveVertex(arcCtlEndRadHigh[0], arcCtlEndRadHigh[1]);
  endShape(CLOSE);
}}

void drawPixelCircular(float thisRadius, float theta, int frame)
{{
  // Draw a circular RPOV pixel
  float thisLength=thisRadius;
  float[] arcBeginInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta)), origin[1]-thisLength*sin(TWO_PI/360 * theta)
    }};
  float[] arcEndInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta)), origin[1]-thisLength*sin(TWO_PI/360 * (theta))
    }};
    thisLength=thisRadius+pixelSize[frame];
  float[] arcBeginOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * theta), origin[1]-thisLength*sin(TWO_PI/360 * theta)
    }};
  float[] arcEndOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta)), origin[1]-thisLength*sin(TWO_PI/360 * (theta))
    }};
    // Next draw the two radiused ends of the RPOV pixel
  float[] radOriginLow= {{
    origin[0]+(thisRadius+pixelSize[frame]/2)*cos(TWO_PI/360 * theta), origin[1]-(thisRadius+pixelSize[frame]/2)*sin(TWO_PI/360 * theta)
    }};
  float[] arcCtlBeginRadLow= {{
    radOriginLow[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (0-(180-theta))), radOriginLow[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (0-(180-theta)))
    }};
    float[] arcBeginRadLow=arcBeginInner;
  float[] arcQtr1RadLow= {{
    radOriginLow[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (0-(135-theta))), radOriginLow[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (0-(135-theta)))
    }};
  float[] arcMidRadLow= {{
    radOriginLow[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (0-(90-theta))), radOriginLow[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (0-(90-theta)))
    }};
  float[] arcQtr3RadLow= {{
    radOriginLow[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (0-(45-theta))), radOriginLow[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (0-(45-theta)))
    }};
    float[] arcEndRadLow=arcBeginOuter;
  float[] arcCtlEndRadLow= {{
    radOriginLow[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (theta)), radOriginLow[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (theta))
    }};
    beginShape();
  curveVertex(arcCtlBeginRadLow[0], arcCtlBeginRadLow[1]);
  curveVertex(arcBeginRadLow[0], arcBeginRadLow[1]);
  curveVertex(arcQtr1RadLow[0], arcQtr1RadLow[1]);
  curveVertex(arcMidRadLow[0], arcMidRadLow[1]);
  curveVertex(arcQtr3RadLow[0], arcQtr3RadLow[1]);
  curveVertex(arcEndRadLow[0], arcEndRadLow[1]);
  curveVertex(arcCtlEndRadLow[0], arcCtlEndRadLow[1]);
  endShape(CLOSE);
  float[] radOriginHigh= {{
    origin[0]+(thisRadius+pixelSize[frame]/2)*cos(TWO_PI/360 * (theta)), origin[1]-(thisRadius+pixelSize[frame]/2)*sin(TWO_PI/360 * (theta))
    }};
  float[] arcCtlBeginRadHigh= {{
    radOriginHigh[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (180+(theta))), radOriginHigh[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (180+theta))
    }};
    float[] arcBeginRadHigh=arcEndInner;
  float[] arcQtr1RadHigh= {{
    radOriginHigh[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (135+(theta))), radOriginHigh[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (135+(theta)))
    }};
  float[] arcMidRadHigh= {{
    radOriginHigh[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (90+(theta))), radOriginHigh[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (90+(theta)))
    }};
  float[] arcQtr3RadHigh= {{
    radOriginHigh[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (45+(theta))), radOriginHigh[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (45+(theta)))
    }};
    float[] arcEndRadHigh=arcEndOuter;
  float[] arcCtlEndRadHigh= {{
    radOriginHigh[0]+(pixelSize[frame]/2)*cos(TWO_PI/360 * (theta)), radOriginHigh[1]-(pixelSize[frame]/2)*sin(TWO_PI/360 * (theta))
    }};
    beginShape();
  curveVertex(arcCtlBeginRadHigh[0], arcCtlBeginRadHigh[1]);
  curveVertex(arcBeginRadHigh[0], arcBeginRadHigh[1]);
  curveVertex(arcQtr1RadHigh[0], arcQtr1RadHigh[1]);
  curveVertex(arcMidRadHigh[0], arcMidRadHigh[1]);
  curveVertex(arcQtr3RadHigh[0], arcQtr3RadHigh[1]);
  curveVertex(arcEndRadHigh[0], arcEndRadHigh[1]);
  curveVertex(arcCtlEndRadHigh[0], arcCtlEndRadHigh[1]);
  endShape(CLOSE);
}}

void drawPixelSquared(float thisRadius, float theta, int frame)
{{
  // Draw a squared arc pixel
  // First the inner radius arc
  float thisLength=thisRadius;
  float[] ctlBeginInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta-0.1)), origin[1]-thisLength*sin(TWO_PI/360 * (theta-0.1))
    }};
  float[] arcBeginInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta)), origin[1]-thisLength*sin(TWO_PI/360 * theta)
    }};
  float[] arcMidInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + increment[frame]/2)), origin[1]-thisLength*sin(TWO_PI/360 * (theta + increment[frame]/2))
    }};
  float[] arcEndInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + increment[frame])), origin[1]-thisLength*sin(TWO_PI/360 * (theta + increment[frame]))
    }};
  float[] ctlEndInner= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + 0.1 + increment[frame])), origin[1]-thisLength*sin(TWO_PI/360 * (theta + 0.1 + increment[frame]))
    }};
    // Next the outer radius arc
    thisLength=thisRadius+pixelSize[frame];
  float[] ctlBeginOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * theta - 0.1), origin[1]-thisLength*sin(TWO_PI/360 * (theta - 0.1))
    }};
  float[] arcBeginOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * theta), origin[1]-thisLength*sin(TWO_PI/360 * theta)
    }};
  float[] arcMidOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + increment[frame]/2)), origin[1]-thisLength*sin(TWO_PI/360 * (theta + increment[frame]/2))
    }};
  float[] arcEndOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + increment[frame])), origin[1]-thisLength*sin(TWO_PI/360 * (theta + increment[frame]))
    }};
  float[] ctlEndOuter= {{
    origin[0]+thisLength*cos(TWO_PI/360 * (theta + 0.1 + increment[frame])), origin[1]-thisLength*sin(TWO_PI/360 * (theta + 0.1 + increment[frame]))
    }};
    // the shape representing the inner portion of the swept RPOV pixel
    beginShape();
  curveVertex(ctlBeginInner[0], ctlBeginInner[1]);
  curveVertex(arcBeginInner[0], arcBeginInner[1]);
  curveVertex(arcMidInner[0], arcMidInner[1]);
  curveVertex(arcEndInner[0], arcEndInner[1]);
  curveVertex(ctlEndInner[0], ctlEndInner[1]);
  curveVertex(ctlEndOuter[0], ctlEndOuter[1]);
  curveVertex(arcEndOuter[0], arcEndOuter[1]);
  curveVertex(arcMidOuter[0], arcMidOuter[1]);
  curveVertex(arcBeginOuter[0], arcBeginOuter[1]);
  curveVertex(ctlBeginOuter[0], ctlBeginOuter[1]);
  endShape(CLOSE);
  line(arcBeginInner[0], arcBeginInner[1], arcEndInner[0], arcEndInner[1]);
  line(arcBeginOuter[0], arcBeginOuter[1], arcEndOuter[0], arcEndOuter[1]);
}}

void ledsHex(String hexString, int thisCount, int drawErase, int frame) {{
  // hexString is assumed to consist of numPixels "words":
  // Depending on the value of "rgb" each "word" in hexString consists of one of the following formats:
  //   hexCharsPerWord == 6:
  //      6 hexadecimal numbers each
  //      representing R G B values for the pixel (8 bits resolution on each color)
  //      i.e. "9aa89d 916e6a b8776e 9f9f98 ..." spaces added for emphasis
  //   hexCharsPerWord == 2:
  //      2 hexadecimal numbers each
  //      representing greyscale values for the pixel (8 bits resolution)
  //      i.e. "9a a8 9d 91 6e 6a b8 ..." spaces added for emphasis
  // count tells us where in the circular sweep we are
  // drawErase tells us to either draw the pixel or erase it
  if (hexString.length()/hexCharsPerWord[frame] != numPixels[frame]) {{
    exit();
  }}
  int redValue = 0;
  int grnValue = 0;
  int bluValue = 0;
  int gsValue = 0;
  int hexIndexIncr = 3; // number of hex characters per individual LED (3=12 bits)
  float modulationValue = 1;
  float outerDiameter = 2.0 * PI * (numPixels[frame] + modAlpha);
  for (int k=0;k < numPixels[frame] * hexCharsPerWord[frame];k += hexCharsPerWord[frame]) {{
    if (radialModulation ) {{
      modulationValue = (k / hexCharsPerWord[frame] + modAlpha) * 2.0 * PI / outerDiameter;
    }} 
    else {{
      modulationValue = 1;
    }}

    if (k < numPixels[frame] * hexCharsPerWord[frame] - 1) {{
      if (gsFlag[frame]) {{
        gsValue=unhex(hexString.substring( k, k+hexIndexIncr));
      }} 
      else {{
        redValue=unhex(hexString.substring( k, k+hexIndexIncr));
        grnValue=unhex(hexString.substring(k+hexIndexIncr, k+2*hexIndexIncr));
        bluValue=unhex(hexString.substring(k+2*hexIndexIncr, k+3*hexIndexIncr));
      }}
    }} 
    else {{
      if (gsFlag[frame]) {{
        gsValue=unhex(hexString.substring( k, k+hexIndexIncr-1));
      }} 
      else {{
        redValue=unhex(hexString.substring( k, k+hexIndexIncr));
        grnValue=unhex(hexString.substring(k+hexIndexIncr, k+2*hexIndexIncr));
        bluValue=unhex(hexString.substring(k+2*hexIndexIncr, k+3*hexIndexIncr-1));
      }}
    }}
    if ( drawErase == 0) {{
      stroke(bgColor);
      fill(bgColor);
    }} 
    else {{
      // rescale them to 8 bits resolution for display
      if (gsFlag[frame]) {{
        stroke(int(gsValue / (1.0 * numGSClockCycles / 256)) * modulationValue,int(gsValue / (1.0 * numGSClockCycles / 256)) * modulationValue,0);
        fill(int(gsValue / (1.0 * numGSClockCycles / 256)) * modulationValue,int(gsValue / (1.0 * numGSClockCycles / 256)) * modulationValue,0);
      }} 
      else {{
        stroke(int(redValue / (1.0 * numGSClockCycles / 256)) * modulationValue, int(grnValue / (1.0 * numGSClockCycles / 256)) * modulationValue, int(bluValue / (1.0 * numGSClockCycles / 256)) * modulationValue);
        fill(int(redValue / (1.0 * numGSClockCycles / 256)) * modulationValue, int(grnValue / (1.0 * numGSClockCycles / 256)) * modulationValue, int(bluValue / (1.0 * numGSClockCycles / 256)) * modulationValue);
      }}
    }}
    // draw the pixel. make sure to offset and scale the starting radius appropriately if this
    // is a partial set sketch
    if (pixelStyle == 0) {{
      drawPixelRounded(sweptLength * (k / hexCharsPerWord[frame]) / numPixels[frame] / partialSet + nextPartialSet * sweptLength / partialSet, 90.0 + deg / 2.0 - increment[frame] * thisCount, frame);
    }} 
    else if (pixelStyle == 1) {{
      drawPixelSquared(sweptLength * (k / hexCharsPerWord[frame]) / numPixels[frame] / partialSet + nextPartialSet * sweptLength / partialSet, 90.0 + deg / 2.0 - increment[frame] * thisCount, frame);
    }} 
    else if (pixelStyle == 2) {{
      drawPixelCircular(sweptLength * (k / hexCharsPerWord[frame]) / numPixels[frame] / partialSet + nextPartialSet * sweptLength / partialSet, 90.0 + deg / 2.0 - increment[frame] * thisCount, frame);
    }}
  }}
}}

// end of XYPOV, RPOV specific
